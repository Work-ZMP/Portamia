// ВВЕДЕНИЕ В JAVA SCRIPT


// 1.1. Тернарный оператор "?" вместо if (использовал - 0 раз)
//вместо
if (age > 18) {
    accessAllowed = true;
} else {
    accessAllowed = false;
}
// можем сделать
let accessAllowed = (age > 18) ? true : false;

// последовательность операторов вопросительного знака ? позволяет вернуть значение, которое зависит от более чем одного условия.
let age = prompt('Возраст?', 18);

let message = (age < 3) ? 'Здравствуй, малыш!' :
    (age < 18) ? 'Привет!' :
        (age < 100) ? 'Здравствуйте!' :
            'Какой необычный возраст!';

alert(message);
//вот так это выглядит с if
if (age < 3) {
    message = 'Здравствуй, малыш!';
} else if (age < 18) {
    message = 'Привет!';
} else if (age < 100) {
    message = 'Здравствуйте!';
} else {
    message = 'Какой необычный возраст!';
}

//Смысл оператора «вопросительный знак» ? – вернуть то или иное значение, в зависимости от условия. Пожалуйста, используйте его именно для этого. Когда вам нужно выполнить разные ветви кода – используйте if. 




// 1.2. Логические операторы

// 1.2.1. ||= (Логическое присваивание ИЛИ)

let johnHasCar = false;

johnHasCar ||= "У Джона нет машины!"; // то же самое, что false || (johnHasCar = "...")

alert(johnHasCar); // "У Джона нет машины!"


// или 
let manufacturer = ""; // оператор ||= преобразует пустую строку "" к логическому значению false

manufacturer ||= "Неизвестный производитель"; // то же самое, что false || (manufacturer = "...")

alert(manufacturer); // "Неизвестный производитель"

/*
Оператор ||= принимает два операнда и выполняет следующие действия:

Вычисляет операнды слева направо.
Конвертирует a в логическое значение.
Если a ложно, присваивает a значение b.
*/


// 1.2.2. &&= (Логическое присваивание И)
//Принцип действия &&= практически такой же, как и у оператора логического присваивания ИЛИ ||=. Единственное отличие заключается в том, что &&= присвоит a значение b только в том случае, если a истинно.
let greeting = "Привет"; // строка непустая, поэтому будет преобразована к логическому значению true оператором &&=

greeting &&= greeting + ", пользователь!"; // то же самое, что true && (greeting = greeting + "...")

alert(greeting) // "Привет, пользователь!"

// 1.2.3. Оператор нулевого слияния (??)

//Оператор ?? возвращает первый аргумент, если он не null/undefined, иначе второй.
let firstName = null;
let lastName = null;
let nickName = "Суперкодер";

// показывает первое значение, которое определено:
alert(firstName ?? lastName ?? nickName ?? "Аноним"); // Суперкодер


// 1.2.4. Оператор нулевого присваивания (??=)
// Если необходимо проверить, равна ли переменная null или undefined, и если это так — присвоить этой переменной какое-либо другое значение.
let userAge = null;

userAge ??= 18;

alert(userAge) // 18


// 1.3. Циклы
// 1.3.1. Цикл «while»
let i = 0;
while (i < 3) { // выводит 0, затем 1, затем 2
    alert(i);
    i++;
}
// Одно выполнение тела цикла по-научному называется итерация. Цикл в примере выше совершает три итерации.

// 1.3.2. Цикл «do…while»
// Цикл сначала выполнит тело, а затем проверит условие condition, и пока его значение равно true, он будет выполняться снова и снова.
let i = 0;
do {
    alert(i);
    i++;
} while (i < 3);
// Такая форма синтаксиса оправдана, если вы хотите, чтобы тело цикла выполнилось хотя бы один раз, даже если условие окажется ложным. На практике чаще используется форма с предусловием: while(…) {…}.


// 1.3.3. Цикл «for»
for (начало; условие; шаг) {
    // ... тело цикла ...
}
for (let i = 0; i < 3; i++) { // выведет 0, затем 1, затем 2
    alert(i);
}
// Вместо объявления новой переменной мы можем использовать уже существующую:
let i = 0;
for (i = 0; i < 3; i++) { // используем существующую переменную
    alert(i); // 0, 1, 2
}
alert(i); // 3, переменная доступна, т.к. была объявлена снаружи цикла

// Любая часть for может быть пропущена. При этом сами точки с запятой ; обязательно должны присутствовать, иначе будет ошибка синтаксиса.
let i = 0; // мы уже имеем объявленную i с присвоенным значением
for (; i < 3; i++) { // нет необходимости в "начале"
  alert( i ); // 0, 1, 2
}


// 1.3.4. Прерывание цикла: «break»
// Обычно цикл завершается при вычислении условия в false. Но мы можем выйти из цикла в любой момент с помощью специальной директивы break.

let sum = 0;

while (true) {

  let value = +prompt("Введите число", '');

  if (!value) break; // (*)

  sum += value;

}
alert( 'Сумма: ' + sum );

// Директива break в строке (*) полностью прекращает выполнение цикла и передаёт управление на строку за его телом, то есть на alert.



// 1.3.5. Переход к следующей итерации: continue
/* Директива continue – «облегчённая версия» break. При её выполнении цикл не прерывается, а переходит к следующей итерации (если условие все ещё равно true).

Её используют, если понятно, что на текущем повторе цикла делать больше нечего.

Например, цикл ниже использует continue, чтобы выводить только нечётные значения: */
for (let i = 0; i < 10; i++) {

    // если true, пропустить оставшуюся часть тела цикла
    if (i % 2 == 0) continue;
  
    alert(i); // 1, затем 3, 5, 7, 9
  }
  /* 
  Для чётных значений i, директива continue прекращает выполнение тела цикла и передаёт управление на следующую итерацию for (со следующим числом). Таким образом alert вызывается только для нечётных значений.
  */



